/* vim: set ft=c tw=174: */
#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>
#include <dt-bindings/zmk/bt.h>
#include "./corne_key_positions.h"
#include "./helpers.h"

// Aliases
#define KEYS_L LT0 LT1 LT2 LT3 LT4 LT5 LM0 LM1 LM2 LM3 LM4 LM5 LB0 LB1 LB2 LB3 LB4 LB5 // left hand
#define KEYS_R RT0 RT1 RT2 RT3 RT4 RT5 RM0 RM1 RM2 RM3 RM4 RM5 RB0 RB1 RB2 RB3 RB4 RB5 // right hand
#define THUMBS LH0 LH1 LH2 RH0 RH1 RH2                                                 // thumbs

/* Global settings */
//
// &sk {  // sticky-key config
//     release-after-ms = <900>;  // release after 0.6s
//     quick-release;             // no double capitalization when rolling keys
// };
//
// &sl {  // sticky-layer config
//     ignore-modifiers;          // allow chording sticky mods & layers
// };

/* Caps-word, num-word and smart-mouse */
// tap: num-word | double-tap: sticky num-layer | hold: num-layer
// #define SMART_NUM &smart_num NUM 0
// ZMK_BEHAVIOR(smart_num, hold_tap,
//     flavor = "balanced";
//     tapping-term-ms = <200>;
//     quick-tap-ms = <QUICK_TAP_MS>;
//     bindings = <&mo>, <&num_dance>;
// )
// ZMK_BEHAVIOR(num_dance, tap_dance,
//     tapping-term-ms = <200>;
//     bindings = <&num_word>, <&sl NUM>;  // reverse this for sticky-num on single tap
// )
// &num_word {  // num-word, requires PR #1451
//     layers = <NUM>;
//     continue-list = <BSPC DEL DOT COMMA PLUS MINUS STAR FSLH EQUAL>;
// };

// smart-mouse, requires PR #1366
// ZMK_BEHAVIOR(smart_mouse, tri_state,
//     bindings = <&tog MOUSE>, <&none>, <&tog MOUSE>;
//     ignored-key-positions = <LT1 LT3 RT1 RT2 RT3 RM1 RM2 RM3 RH0 RH1>;
//     ignored-layers = <MOUSE>;
// )

/* Keymap */
#define BASE 0
#define SYM 1
#define NAV 2

// Home row modes
MAKE_HRM(hml, &kp, &kp, KEYS_R THUMBS)  // left-hand HRMs
MAKE_HRM(hmr, &kp, &kp, KEYS_L THUMBS)  // right-hand HRMs
MAKE_HRM(hml_repeat, &kp, &key_repeat, KEYS_R THUMBS)  // used for HRM-combo

// sl WIN
// caps_word
// TODO: numword, symword, special chars, caps_word, del

ZMK_LAYER(base,
    &kp GRAVE  &kp Q        &kp W        &kp E         &kp R         &kp T         /* */  &kp Y          &kp U         &kp I         &kp O        &kp P           &kp MINUS
    &kp ESC    &hml LGUI A  &hml LALT S  &hml LCTRL D  &hml LSHFT F  &kp G         /* */  &kp H          &hmr RSHFT J  &hmr LCTRL K  &hmr LALT L  &hmr LGUI SEMI  &kp SQT
    &kp BSLH   &kp Z        &kp X        &kp C         &kp V         &kp B         /* */  &kp N          &kp M         &kp COMMA     &kp DOT      &kp FSLH        &kp EQUAL
                                         &none         &lt NAV TAB   &lt SYM BSPC  /* */  &lt SYM SPACE  &lt NAV RET   &none
)

ZMK_LAYER(sym,
    &trans  &kp EXCL      &kp AT        &kp HASH       &kp DLLR       &kp PRCNT  /* */  &kp CARET  &kp AMPS       &kp STAR       &kp LPAR      &kp RPAR      &trans
    &trans  &hml LGUI N1  &hml LALT N2  &hml LCTRL N3  &hml LSHFT N4  &kp N5     /* */  &kp N6     &hmr RSHFT N7  &hmr LCTRL N8  &hmr LALT N9  &hmr LGUI N0  &trans
    &trans  &kp LG(N1)    &kp LG(N2)    &kp LG(N3)     &kp LG(N4)     &kp LG(N5) /* */  &kp DEL    &kp LBKT       &kp LBRC       &kp RBRC      &kp RBKT      &trans
                                        &trans         &kp TAB        &kp BSPC   /* */  &kp LA(A)  &kp RET        &trans
)

ZMK_LAYER(nav,
    &trans  &trans  &trans  &trans  &trans   &trans    /* */  &kp INS    &kp HOME   &kp UP     &kp END    &kp PG_UP  &kp C_VOL_UP
    &trans  &trans  &trans  &trans  &trans   &trans    /* */  &trans     &kp LEFT   &kp DOWN   &kp RIGHT  &kp PG_DN  &kp C_VOL_DN
    &trans  &trans  &trans  &trans  &trans   &trans    /* */  &kp DEL    &kp LC(P)  &kp LC(C)  &kp LC(X)  &kp LC(Z)  &kp K_MUTE
                            &trans  &kp TAB  &kp BSPC  /* */  &kp SPACE  &kp RET    &none
)

ZMK_LAYER(sys,
    &kp C_BKLT_TOG    &kp F9    &kp F10    &kp F11         &kp F12         &none       /* */  &bt BT_SEL 0    &bt BT_SEL 1      &bt BT_SEL 2    &bt BT_SEL 3    &bt BT_SEL 4    &bt BT_CLR
    &kp C_BRI_UP      &kp F5    &kp F6     &kp F7          &kp F8          &kp PSCRN   /* */  &none           &kp RSHFT         &kp LCTRL       &kp LALT        &kp LGUI        &none
    &kp C_BRI_DN      &kp F1    &kp F2     &kp F3          &kp F4          &none       /* */  &none           &none             &none           &none           &none           &none
                                           &kp C_VOL_DN    &kp C_VOL_UP    &kp K_MUTE  /* */  &none           &none             &none
)

// ZMK_LAYER(win,
//     &kp PSCRN       &kp LS(LG(N1))    &kp LS(LG(N2))    &kp LS(LG(N3))    &kp LS(LG(N4))    &kp LS(LG(N5))  /* */  &kp LS(LG(N6))    &kp LS(LG(N7))    &kp LS(LG(N8))    &kp LS(LG(N9))    &kp LS(LG(N0))    &kp LS(PSCRN) // sway move to ws
//     &kp K_CANCEL    &kp LG(N1)        &kp LG(N2)        &kp LG(N3)        &kp LG(N4)        &kp LG(N5)      /* */  &kp LG(N6)        &kp LG(N7)        &kp LG(N8)        &kp LG(N9)        &kp LG(N0)        &kp LS(LG(Q)) // sway switch to ws
//     &none           &none             &none             &none             &none             &none           /* */  &none             &none             &none             &none             &none             &none
//                                                         &none             &none             &none           /* */  &kp LA(A)         &none             &none
// )

// ZMK_LAYER(uc,
// //╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
//     X_LT     ___           &el_omega     &el_phi       &el_pi        &el_beta        X_MT     ___           &el_lambda    &el_upsilon   &el_psi       &de_eszett      X_RT
// //├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
//     X_LM     &el_alpha     &el_rho       &el_sigma     &el_tau       &el_gamma       X_MM     &el_mu        &el_nu        &el_epsilon   &el_iota      &el_omikron     X_RM
// //├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
//     X_LB     &el_zeta      &el_xi        &el_chi       &el_delta     &el_theta       X_MB     &el_kappa     &el_eta       &de_ae        &de_oe        &de_ue          X_RB
// //├──────┤ ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯ ├──────┤
//     X_LH                                               ___           ___             X_MH     ___           ___                                                       X_RH
// //╰──────╯                                           ╰─────────────┴─────────────╯ ╰──────╯ ╰───────────────────────────╯                                           ╰──────╯
// )
//
// ZMK_LAYER(mouse,
// //╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮ ╭─────────────┬─────────────┬─────────────┬─────────────┬─────────────╮ ╭──────╮
//     X_LT     ___           ___           ___           ___           ___             X_MT     ___           U_WH_D        U_MS_U         U_WH_U       ___             X_RT
// //├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
//     X_LM     ___           ___           ___           ___           ___             X_MM     ___           U_MS_L        U_MS_D         U_MS_R       ___             X_RM
// //├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┼─────────────┼─────────────┤ ├──────┤
//     X_LB     ___           ___           ___           ___           ___             X_MB     ___           ___           ___            ___          ___             X_RB
// //├──────┤ ╰─────────────┼─────────────┴─────────────┼─────────────┼─────────────┤ ├──────┤ ├─────────────┼─────────────┼─────────────┴───────────────────────────╯ ├──────┤
//     X_LH                                               ___           ___             X_MH     U_BTN2        U_BTN1                                                    X_RH
// //╰──────╯                                           ╰─────────────┴─────────────╯ ╰──────╯ ╰─────────────┴─────────────╯                                           ╰──────╯
// )

